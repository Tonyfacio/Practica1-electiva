//main.dart
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:intl/intl.dart'; // Importa el paquete de intl para poder utilizar DateFormat

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Delegados App',
      theme: ThemeData(
        primaryColor: const Color.fromARGB(255, 255, 251, 251), // Color principal del PRM
        hintColor: const Color.fromARGB(255, 30, 120, 245), // Color secundario del PRM
        // Otros ajustes de tema...
      ),
      home: EventRegistrationScreen(), // Aquí deberías especificar el widget que deseas mostrar como página principal de tu aplicación
    );
  }
}

class EventRegistrationScreen extends StatefulWidget {
  @override
  _EventRegistrationScreenState createState() => _EventRegistrationScreenState();
}

class _EventRegistrationScreenState extends State<EventRegistrationScreen> {
  // Declaraciones de variables para almacenar los datos del evento
  String _title = '';
  DateTime? _selectedDate; // Declarar _selectedDate como nullable agregando el signo de interrogación '?'
  String _description = '';
  File? _image; // Declarar _image como nullable agregando el signo de interrogación '?'

  // Función para mostrar el selector de fecha
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != _selectedDate)
      setState(() {
        _selectedDate = picked;
      });
  }

  // Función para seleccionar una foto desde la galería
  Future<void> _getImage() async {
    // Implementa la lógica para seleccionar una foto desde la galería
    // Aquí puedes utilizar un paquete como image_picker
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Registro de Evento'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            TextFormField(
              decoration: InputDecoration(labelText: 'Título'),
              onChanged: (value) {
                setState(() {
                  _title = value;
                });
              },
            ),
            SizedBox(height: 16.0),
            Row(
              children: <Widget>[
                Expanded(
                  child: Text(
                    _selectedDate == null
                        ? 'Fecha: No seleccionada'
                        : 'Fecha: ${DateFormat.yMd().format(_selectedDate!)}', // Accede a _selectedDate con el operador de nulabilidad '!'
                  ),
                ),
                TextButton( // Cambia FlatButton por TextButton
                  onPressed: () => _selectDate(context),
                  child: Text(
                    'Seleccionar Fecha',
                    style: TextStyle(color: Theme.of(context).primaryColor),
                  ),
                ),
              ],
            ),
            SizedBox(height: 16.0),
            TextFormField(
              decoration: InputDecoration(labelText: 'Descripción'),
              onChanged: (value) {
                setState(() {
                  _description = value;
                });
              },
            ),
            SizedBox(height: 16.0),
            _image == null
                ? ElevatedButton( // Cambia RaisedButton por ElevatedButton
                    onPressed: _getImage,
                    child: Text('Seleccionar Foto'),
                  )
                : Image.file(
                    _image!,
                    height: 150.0,
                    width: 150.0,
                    fit: BoxFit.cover,
                  ),
            SizedBox(height: 16.0),
            ElevatedButton( // Cambia RaisedButton por ElevatedButton
              onPressed: () {
                // Implementa la lógica para guardar el evento
              },
              child: Text('Guardar Evento'),
            ),
          ],
        ),
      ),
    );
  }
}
